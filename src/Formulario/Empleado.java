package Formulario;

import javax.swing.JOptionPane;
import Conexion.CreateConection;//Clase Generica
import java.awt.GridLayout;
import java.sql.Connection;//Para el manejo de conexion
import java.sql.Statement;//Para manejo de sentencias
import java.sql.SQLException; //Manejo de errores
import java.sql.PreparedStatement; // Sentencias Parametrizadas
import java.sql.ResultSet;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;

// hola mundo



public class Empleado extends javax.swing.JFrame {
    CreateConection conexionPostgres = new CreateConection();
    private Connection con; 
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(Empleado.class.getName());

    /**
     * Creates new form Empleado
     */
    public Empleado() {
        initComponents();
        try {
            con = conexionPostgres.getConection(); // ya accesible en btnSave
        } catch (SQLException ex) {
            System.getLogger(Empleado.class.getName()).log(System.Logger.Level.ERROR, (String) null, ex);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jDialog1 = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtNombre = new javax.swing.JTextField();
        txtApellido = new javax.swing.JTextField();
        txtSalario = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSearch = new javax.swing.JButton();
        txtInformation = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        jButton1.setText("jButton1");

        javax.swing.GroupLayout jDialog1Layout = new javax.swing.GroupLayout(jDialog1.getContentPane());
        jDialog1.getContentPane().setLayout(jDialog1Layout);
        jDialog1Layout.setHorizontalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jDialog1Layout.setVerticalGroup(
            jDialog1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("ID");

        jLabel2.setText("Nombre");

        jLabel3.setText("Apellido");

        jLabel4.setText("Salario");

        txtId.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdActionPerformed(evt);
            }
        });

        txtNombre.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNombreActionPerformed(evt);
            }
        });

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        btnSearch.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                btnSearchPropertyChange(evt);
            }
        });

        txtInformation.setText("i");
        txtInformation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtInformationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jSeparator1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtNombre)
                            .addComponent(txtSalario)
                            .addComponent(txtId)
                            .addComponent(txtApellido)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtInformation)
                        .addGap(18, 18, 18)
                        .addComponent(btnSave)
                        .addGap(18, 18, 18)
                        .addComponent(btnSearch)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete)))
                .addContainerGap(41, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtNombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(42, 42, 42)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtApellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSalario, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSearch)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete)
                    .addComponent(txtInformation)
                    .addComponent(btnSave))
                .addGap(29, 29, 29))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void guardarEmpleadoPS(){
        if (txtNombre.getText().trim().isEmpty() || txtApellido.getText().trim().isEmpty() ||txtSalario.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay datos en uno o más campos.", "ERROR!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        
        int opcion = JOptionPane.showConfirmDialog(this, "Desea Guardar estos datos?", "Seleccione una opción", JOptionPane.YES_NO_OPTION);
        
        if (opcion == JOptionPane.YES_OPTION) {
            // Validar si algún campo está vacío
            try {
                String qry = "INSERT INTO public.empleado(nombre,apellido,salario) VALUES (?, ?, ?)";
                PreparedStatement ps = con.prepareStatement(qry);

                ps.setString(1, txtNombre.getText().trim());
                ps.setString(2, txtApellido.getText().trim());
                ps.setDouble(3, Double.parseDouble(txtSalario.getText().trim()));

                int filasInsertadas = ps.executeUpdate();
                JOptionPane.showMessageDialog(this, "Empleado guardado correctamente. Registros insertados: " + filasInsertadas);

                txtNombre.setText("");
                txtApellido.setText("");
                txtSalario.setText("");

                ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al guardar: " + e.getMessage());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El salario debe ser un número válido.", "ERROR!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se guardaron datos");
        }
    }
    
    public void buscarEmpleadoPS(){
       try { 
            String qry = "SELECT id_empleado, nombre, apellido, salario FROM public.empleado WHERE id_empleado = ?";
            PreparedStatement ps = con.prepareStatement(qry);
            String id = JOptionPane.showInputDialog(this, "Inserta el ID del usuario: ", "Buscar", JOptionPane.INFORMATION_MESSAGE);
            
            if (id == null || id.trim().isEmpty()) {
                return;
            }
            
            ps.setInt(1, Integer.parseInt(id));
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                // Poner la info de la tabla en los campos de texto
                txtId.setText(rs.getString("id_empleado"));
                txtNombre.setText(rs.getString("nombre"));
                txtApellido.setText(rs.getString("apellido"));
                txtSalario.setText(rs.getString("salario"));

                JOptionPane.showMessageDialog(this, "Empleado encontrado!");
            } else {
                JOptionPane.showMessageDialog(this, "No existe un empleado con ese ID.");

                // Limpiar campos si no hay resultados
                txtId.setText("");
                txtNombre.setText("");
                txtApellido.setText("");
                txtSalario.setText("");
            }

            rs.close();
            ps.close();
        } catch (SQLException e){
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Error en la búsqueda: " + e.getMessage());
        }   
    }
    
    public void actualizarEmpleadoPS(){
        if (txtId.getText().trim().isEmpty()){
            JOptionPane.showMessageDialog(this, "Necesitas el ID del empleado para Actualizar", "ERROR!", JOptionPane.ERROR_MESSAGE);
            return;    
        }
        
        if (txtNombre.getText().trim().isEmpty() || txtApellido.getText().trim().isEmpty() ||txtSalario.getText().trim().isEmpty()) {
            JOptionPane.showMessageDialog(this, "No hay datos en uno o más campos.", "ERROR!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        
        int opcion = JOptionPane.showConfirmDialog(this, "Desea Actualizar estos datos?", "Seleccione una opción", JOptionPane.YES_NO_OPTION);
        
        if (opcion == JOptionPane.YES_OPTION) {
            // Validar si algún campo está vacío
            try {
                String qry = "UPDATE public.empleado SET nombre = ?, apellido = ?, salario = ? WHERE id_empleado = ?";
                PreparedStatement ps = con.prepareStatement(qry);

                ps.setString(1, txtNombre.getText().trim());
                ps.setString(2, txtApellido.getText().trim());
                ps.setDouble(3, Double.parseDouble(txtSalario.getText().trim()));
                ps.setInt(4, Integer.parseInt(txtId.getText()));

                int filasInsertadas = ps.executeUpdate();
                JOptionPane.showMessageDialog(this, "Empleado actualizado correctamente. Registros actualizados: " + filasInsertadas);

                txtId.setText("");
                txtNombre.setText("");
                txtApellido.setText("");
                txtSalario.setText("");

                ps.close();
            } catch (SQLException e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error al actualizar: " + e.getMessage());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El salario debe ser un número válido.", "ERROR!", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "No se guardaron datos");
            return;
        }  
    }
    
    public void eliminarEmpleadoPS(){
        String id = JOptionPane.showInputDialog(null, "Inserta el ID del usuario: ", "Eliminar", JOptionPane.INFORMATION_MESSAGE);
        
        if (id == null || id.trim().isEmpty()) {
            return;
        }
        
        int opcion = JOptionPane.showConfirmDialog(this, "Desea eliminar al suario con ID: " + id, "Seleccione una opción", JOptionPane.YES_NO_OPTION);
        if (opcion == JOptionPane.YES_OPTION) {
            try {
                //Esta es mi sentencia
                String qry = "DELETE FROM public.empleado WHERE id_empleado = ?";

                //Crear espacio de trabajo para llevar la conexion y escrbir sentencias sql
                    PreparedStatement ps = con.prepareStatement(qry);

                    ps.setInt (1, Integer.parseInt(id));

                    int filasEliminadas = ps.executeUpdate();
                    //Ejecuta la sentencia a la base de datos, la cual returna un int
                    JOptionPane.showMessageDialog(this, "Total de Registros Eliminados: " + filasEliminadas);

                    ps.close();
                } catch (SQLException e){
                    e.printStackTrace();
                    JOptionPane.showMessageDialog(this, "Error al guardar: " + e.getMessage());
                }
        } else {
            JOptionPane.showMessageDialog(this, "No se eliminaron los datos del ID: '" + id + "'"); 
        }
    }
    
    public void altBuscarEmpleadoPS() {
       try { 
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(2, 2, 5, 5));

        panel.add(new JLabel("Buscar por:"));
        String[] opciones = {"ID", "Nombre", "Apellido"};
        JComboBox<String> combo = new JComboBox<>(opciones);
        panel.add(combo);

        panel.add(new JLabel("Valor:"));
        JTextField txtValor = new JTextField();
        panel.add(txtValor);

        int result = JOptionPane.showConfirmDialog(this, panel, "Buscar empleado", JOptionPane.OK_CANCEL_OPTION, JOptionPane.PLAIN_MESSAGE);

        if (result == JOptionPane.OK_OPTION) {
            String criterio = (String) combo.getSelectedItem();
            String valor = txtValor.getText().trim();

            if (valor.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Debes ingresar un valor.");
            } else {
                String qry1 = "";
                if (criterio.equals("ID")) {
                    qry1 = "SELECT id_empleado, nombre, apellido, salario FROM public.empleado WHERE id_empleado = ?";
                } else if (criterio.equals("Nombre")) {
                    qry1 = "SELECT id_empleado, nombre, apellido, salario FROM public.empleado WHERE LOWER(nombre) = LOWER(?)";
                } else if (criterio.equals("Apellido")){
                    qry1 = "SELECT id_empleado, nombre, apellido, salario FROM public.empleado WHERE LOWER(apellido) = LOWER(?)";
                }
                
                PreparedStatement ps = con.prepareStatement(qry1);
                
                if (criterio.equals("ID")) {
                    ps.setInt(1, Integer.parseInt(valor.trim()));
                } else {
                    ps.setString(1, valor.trim());
                }
                
                ResultSet rs = ps.executeQuery();

                if (rs.next()) {
                    // Mostrar la info en los JTextField
                    txtId.setText(rs.getString("id_empleado"));
                    txtNombre.setText(rs.getString("nombre"));
                    txtApellido.setText(rs.getString("apellido"));
                    txtSalario.setText(rs.getString("salario"));

                    JOptionPane.showMessageDialog(this, "Empleado encontrado!");
                } else {
                    JOptionPane.showMessageDialog(this, "No existe un empleado con ese " + criterio.toLowerCase() + ".");

                    // Limpiar campos si no hay resultados
                    txtId.setText("");
                    txtNombre.setText("");
                    txtApellido.setText("");
                    txtSalario.setText("");
                }

                rs.close();
                ps.close();

                }
            }
//        
//            String qry = "SELECT id_empleado, nombre, apellido, salario FROM public.empleado WHERE id_empleado = ?";
//            PreparedStatement ps = con.prepareStatement(qry);
//            String id = JOptionPane.showInputDialog(this, "Inserta el ID del usuario: ", "Buscar", JOptionPane.INFORMATION_MESSAGE);
//            
//            if (id == null || id.trim().isEmpty()) {
//                return;
//            }
//            
//            ps.setInt(1, Integer.parseInt(id));
//            ResultSet rs = ps.executeQuery();
//
//            if (rs.next()) {
//                // Poner la info de la tabla en los campos de texto
//                txtId.setText(rs.getString("id_empleado"));
//                txtNombre.setText(rs.getString("nombre"));
//                txtApellido.setText(rs.getString("apellido"));
//                txtSalario.setText(rs.getString("salario"));
//
//                JOptionPane.showMessageDialog(this, "Empleado encontrado!");
//            } else {
//                JOptionPane.showMessageDialog(this, "No existe un empleado con ese ID.");
//
//                // Limpiar campos si no hay resultados
//                txtId.setText("");
//                txtNombre.setText("");
//                txtApellido.setText("");
//                txtSalario.setText("");
//            }
//
//            rs.close();
//            ps.close();
            } catch (SQLException e){
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Error en la búsqueda: " + e.getMessage());
            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "El ID debe ser un número válido.");
            }
    }
    
    
    
    private void txtIdActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIdActionPerformed

    private void txtNombreActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNombreActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtNombreActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        altBuscarEmpleadoPS();
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        guardarEmpleadoPS();
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        eliminarEmpleadoPS();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        actualizarEmpleadoPS();
        
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void txtInformationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtInformationActionPerformed
        txtId.setText("");
        txtNombre.setText("");
        txtApellido.setText("");
        txtSalario.setText("");
        
        JOptionPane.showMessageDialog(this, "Save Button: Guarda informacion que insertes en los campos de texto de nombre, apellido y salario.\n\n"
                + "Search Button: Busca el ID que insertes en su campo de texto.\n\n"
                + "Update Button: Actualiza los datos de un cliente con su ID\n puedes usar el boton de 'Search' pra buscarlo por su ID.\n\n"
                + "Delete Button: Elimina Usuarios de la base de datos con su ID", "Información", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_txtInformationActionPerformed

    private void btnSearchPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_btnSearchPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_btnSearchPropertyChange

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new Empleado().setVisible(true));
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JButton jButton1;
    private javax.swing.JDialog jDialog1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField txtApellido;
    private javax.swing.JTextField txtId;
    private javax.swing.JButton txtInformation;
    private javax.swing.JTextField txtNombre;
    private javax.swing.JTextField txtSalario;
    // End of variables declaration//GEN-END:variables
}
